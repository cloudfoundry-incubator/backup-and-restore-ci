---
deployment-name: &deployment-name k-drats

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

resources:
- name: kubo-disaster-recovery-acceptance-tests
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/kubo-disaster-recovery-acceptance-tests.git
    private_key: ((git-private-key))
    branch: master
    ignore_paths:
    - README.md

- name: bosh-backup-and-restore-meta
  type: git
  source:
    uri: git@github.com:pivotal-cf/bosh-backup-and-restore-meta.git
    private_key: ((git-private-key))
    git_crypt_key: ((git-crypt-key))
    branch: master

- name: backup-and-restore-ci
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/backup-and-restore-ci.git
    private_key: ((git-private-key))
    branch: master

- name: kubo-deployment
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/kubo-deployment.git
    private_key: ((git-private-key))
    tag_filter: v0.*

- name: cf-deployment-concourse-tasks
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-deployment-concourse-tasks.git
    private_key: ((git-private-key))
    tag_filter: v7.*

- name: bbr-binary-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: bosh-backup-and-restore
    access_token: ((github-access-token))

- name: kubo-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: kubo-release
    access_token: ((github-access-token))

- name: terraform
  type: terraform
  source:
    storage:
      bucket: bbr-terraform-states
      bucket_path: /
      access_key_id: ((aws-access-key-id))
      secret_access_key: ((aws-secret-access-key))
      region_name: eu-west-1

- name: k-drats
  type: bosh-deployment
  source:
    deployment: *deployment-name
    target: "((maru-bosh-director-url))"
    client: "((maru-bosh-director-username))"
    client_secret: "((maru-bosh-director-password))"
    ca_cert: "((maru-bosh-director-ca-cert))"
    jumpbox_url: "((maru-jumpbox-url)):22"
    jumpbox_ssh_key: "((maru-jumpbox-ssh-key))"

- name: xenial-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-google-kvm-ubuntu-xenial-go_agent

jobs:
- name: deploy-k-drats
  serial: true
  serial_groups: [k-drats]
  plan:
  - aggregate:
    - get: kubo-disaster-recovery-acceptance-tests
      trigger: true
    - get: bbr-binary-release
      trigger: true
    - get: bosh-backup-and-restore-meta
    - get: kubo-deployment
      trigger: true
    - get: xenial-stemcell
    - get: kubo-release
    - get: cf-deployment-concourse-tasks
  - task: add-vm-extension-to-cloud-config
    params:
      BOSH_DEPLOYMENT: *deployment-name
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
          tag: v5.19.0
      inputs:
      - name: bosh-backup-and-restore-meta
      run:
        path: bash
        args:
        - -euc
        - |
          pushd "bosh-backup-and-restore-meta/maru"
            eval "$(bbl print-env)"
          popd

          bosh update-config \
            --non-interactive \
            --type cloud \
            --name "${BOSH_DEPLOYMENT}-lb" \
            -v "deployment_name=${BOSH_DEPLOYMENT}" \
            "bosh-backup-and-restore-meta/k-drats/cloud-config/lb-vm-extension.yml"
  - put: terraform
    params:
      terraform_source: bosh-backup-and-restore-meta/k-drats/terraform
      env_name: *deployment-name
      delete_on_failure: true
      vars:
        gcp_service_account_key: ((gcp_service_account_key))
        network_name: maru-network
        cfcr_deployment_name: *deployment-name
  - task: extract-kubernetes-master-host
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
          tag: v5.19.0
      inputs:
      - name: terraform
      outputs:
      - name: kubernetes-master-host
      run:
        path: bash
        args:
        - -ec
        - |
          echo "kubernetes_master_host: $(jq -r .lb < terraform/metadata)" > kubernetes-master-host/vars.yml
  - put: k-drats
    params:
      manifest: kubo-deployment/manifests/cfcr.yml
      stemcells:
      - xenial-stemcell/*.tgz
      releases:
      - kubo-release/*.tgz
      ops_files:
      - kubo-deployment/manifests/ops-files/rename.yml
      - kubo-deployment/manifests/ops-files/misc/single-master.yml
      - kubo-deployment/manifests/ops-files/enable-bbr.yml
      - bosh-backup-and-restore-meta/k-drats/operations/add-lb-vm-extension.yml
      - bosh-backup-and-restore-meta/k-drats/operations/configure-kubernetes-master-host.yml
      - bosh-backup-and-restore-meta/k-drats/operations/configure-worker-instances.yml
      vars:
        deployment_name: *deployment-name
        worker_instances: 1
      vars_files:
      - kubernetes-master-host/vars.yml
  - task: apply-specs
    file: cf-deployment-concourse-tasks/run-errand/task.yml
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
    params:
      BBL_STATE_DIR: maru
      DEPLOYMENT_NAME: *deployment-name
      ERRAND_NAME: apply-specs

- name: run-k-drats
  serial: true
  serial_groups: [k-drats]
  plan:
  - aggregate:
    - get: kubo-disaster-recovery-acceptance-tests
      trigger: true
      passed: [deploy-k-drats]
    - get: bbr-binary-release
      trigger: true
      passed: [deploy-k-drats]
    - get: backup-and-restore-ci
    - get: terraform
      passed: [deploy-k-drats]
    - get: bosh-backup-and-restore-meta
  - task: add-credentials-to-k-drats-config
    file: backup-and-restore-ci/tasks/add-credentials-to-k-drats-config/task.yml
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
      k-drats-config: bosh-backup-and-restore-meta
    params:
      CONFIG_PATH: maru/k-drats-config.json
      BBL_STATE_DIR: maru
      BOSH_DIRECTOR_NAME: bosh-maru
      BOSH_DEPLOYMENT: *deployment-name
  - task: run-k-drats
    file: kubo-disaster-recovery-acceptance-tests/ci/run-k-drats/task.yml
    input_mapping:
       bbl-state: bosh-backup-and-restore-meta
       k-drats-config: updated-k-drats-config
    params:
      BBL_STATE_DIR: maru
      BOSH_DEPLOYMENT: *deployment-name

- name: delete-k-drats
  serial: true
  serial_groups: [k-drats]
  plan:
  - aggregate:
    - get: kubo-disaster-recovery-acceptance-tests
      trigger: true
      passed: [run-k-drats]
    - get: bbr-binary-release
      trigger: true
      passed: [run-k-drats]
    - get: bosh-backup-and-restore-meta
  - put: k-drats
    params:
      delete:
        enabled: true
        force: true
  - put: terraform
    params:
      terraform_source: bosh-backup-and-restore-meta/k-drats/terraform
      env_name: *deployment-name
      action: destroy
      vars:
        gcp_service_account_key: ((gcp_service_account_key))
        network_name: maru-network
        cfcr_deployment_name: *deployment-name
    get_params:
      action: destroy
  - task: delete-vm-extension-from-cloud-config
    params:
      BOSH_DEPLOYMENT: *deployment-name
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
          tag: v5.19.0
      inputs:
      - name: bosh-backup-and-restore-meta
      run:
        path: bash
        args:
        - -euc
        - |
          pushd "bosh-backup-and-restore-meta/maru"
            eval "$(bbl print-env)"
          popd

          bosh delete-config \
            --non-interactive \
            --type cloud \
            --name "${BOSH_DEPLOYMENT}-lb"
  - task: delete-k-drats-creds
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
    params:
      BBL_STATE_DIR: maru
      BOSH_DEPLOYMENT: *deployment-name
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
          tag: v5.19.0
      inputs:
      - name: bbl-state
      run:
        path: bash
        args:
        - -euc
        - |
          pushd "bbl-state/$BBL_STATE_DIR"
            eval "$(bbl print-env)"

            secrets="$(credhub find -n "$BOSH_DEPLOYMENT" --output-json || echo '{"credentials":[]}')"
            for secret in $(jq -r .credentials[].name <<< "$secrets"); do
              echo "Deleting secret: $secret"
              credhub delete -n "$secret"
            done
          popd
