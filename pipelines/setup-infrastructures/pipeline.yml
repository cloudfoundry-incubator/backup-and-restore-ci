---
common_bbl_params: &COMMON_BBL_PARAMS
  BBL_GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
  BBL_GCP_PROJECT_ID: cf-backup-and-restore
  GIT_COMMIT_EMAIL: cf-lazarus@pivotal.io
  GIT_COMMIT_USERNAME: "Backup & Restore Concourse"
common_bbl_up_params: &COMMON_BBL_UP_PARAMS
  << : *COMMON_BBL_PARAMS
  BBL_IAAS: gcp
  BBL_GCP_REGION: europe-west1

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

resources:
- name: cf-deployment-concourse-tasks
  type: git
  source:
    branch: master
    uri: https://github.com/cloudfoundry/cf-deployment-concourse-tasks.git
    tag_filter: v6.*

- name: bosh-backup-and-restore-meta
  type: git
  source:
    uri: git@github.com:pivotal-cf/bosh-backup-and-restore-meta.git
    private_key: ((git-private-key))
    git_crypt_key: ((git-crypt-key))
    branch: master

- name: backup-and-restore-ci
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/backup-and-restore-ci.git
    private_key: ((git-private-key))
    branch: master

- name: bosh-bootloader
  type: git
  source:
    uri: https://github.com/cloudfoundry/bosh-bootloader.git
    branch: master
    tag_filter: v6.*

- name: terraform
  type: terraform
  source:
    storage:
      bucket: bbr-terraform-states
      bucket_path: /
      access_key_id: ((aws-access-key-id))
      secret_access_key: ((aws-secret-access-key))
      region_name: eu-west-1

- name: relint-trackerbot
  type: git
  source:
    uri: git@github.com:pivotal-cf-experimental/relint-trackerbot.git
    private_key: ((git-private-key))
    branch: master

- name: bbr-tracker-bot
  type: cf
  source:
    api: https://api.run.pivotal.io
    username: ((pws-username))
    password: ((pws-password))
    organization: ((pws-org))
    space: ((pws-tracker-bot-space))
    skip_cert_check: false

- name: every-tuesday
  type: time
  source:
    start: 8:00 AM
    stop: 9:00 AM
    days:
    - Tuesday
    location: Europe/London

- name: every-friday
  type: time
  source:
    start: 8:00 AM
    stop: 9:00 AM
    days:
    - Friday
    location: Europe/London

- name: everyday
  type: time
  source:
    start: 8:00 AM
    stop: 9:00 AM
    days:
    - Monday
    - Tuesday
    - Wednesday
    - Thursday
    - Friday
    location: Europe/London

jobs:
- name: setup-infrastructure-aws-s3
  serial: true
  serial_groups: [aws-s3]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: bosh-backup-and-restore-meta
  - task: setup-infrastructure
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    params:
      << : *COMMON_BBL_UP_PARAMS
      BBL_STATE_DIR: external-blobstore-directors/aws-s3/
      BBL_LB_CERT: ((aws-s3-lb-cert))
      BBL_LB_KEY: ((aws-s3-lb-key))
      LB_DOMAIN: bbr-s3.cf-app.com
      BBL_ENV_NAME: bbr-s3
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
      bbl-config: bosh-backup-and-restore-meta
    ensure:
      put: bosh-backup-and-restore-meta
      params:
        repository: updated-bbl-state
        rebase: true

- name: clean-up-aws-s3
  serial: true
  serial_groups: [aws-s3]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
      passed: [setup-infrastructure-aws-s3]
    - get: bosh-backup-and-restore-meta
    - get: everyday
      trigger: true
  - task: bosh-clean-up
    file: cf-deployment-concourse-tasks/bosh-cleanup/task.yml
    params:
      BBL_STATE_DIR: external-blobstore-directors/aws-s3/
      CLEAN_ALL: false
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta

- name: destroy-infrastructure-aws-s3
  serial: true
  serial_groups: [aws-s3]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
      passed: [clean-up-aws-s3]
    - get: bosh-backup-and-restore-meta
  - task: bbl-destroy
    file: cf-deployment-concourse-tasks/bbl-destroy/task.yml
    params:
      << : *COMMON_BBL_PARAMS
      BBL_STATE_DIR: external-blobstore-directors/aws-s3/
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
      bbl-config: bosh-backup-and-restore-meta
    ensure:
      put: bosh-backup-and-restore-meta
      params:
        repository: updated-bbl-state
        rebase: true

- name: setup-infrastructure-aws-s3-unversioned
  serial: true
  serial_groups: [aws-s3-unversioned]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: bosh-backup-and-restore-meta
  - task: setup-infrastructure
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    params:
      << : *COMMON_BBL_UP_PARAMS
      BBL_STATE_DIR: external-blobstore-directors/aws-s3-unversioned/
      BBL_LB_CERT: ((aws-s3-unversioned-lb-cert))
      BBL_LB_KEY: ((aws-s3-unversioned-lb-key))
      LB_DOMAIN: bbr-s3-unversioned.cf-app.com
      BBL_ENV_NAME: bbr-s3-unversioned
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
      bbl-config: bosh-backup-and-restore-meta
    ensure:
      put: bosh-backup-and-restore-meta
      params:
        repository: updated-bbl-state
        rebase: true

- name: clean-up-aws-s3-unversioned
  serial: true
  serial_groups: [aws-s3-unversioned]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
      passed: [setup-infrastructure-aws-s3-unversioned]
    - get: bosh-backup-and-restore-meta
    - get: everyday
      trigger: true
  - task: bosh-clean-up
    file: cf-deployment-concourse-tasks/bosh-cleanup/task.yml
    params:
      BBL_STATE_DIR: external-blobstore-directors/aws-s3-unversioned/
      CLEAN_ALL: false
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta

- name: destroy-infrastructure-aws-s3-unversioned
  serial: true
  serial_groups: [aws-s3-unversioned]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
      passed: [clean-up-aws-s3-unversioned]
    - get: bosh-backup-and-restore-meta
  - task: bbl-destroy
    file: cf-deployment-concourse-tasks/bbl-destroy/task.yml
    params:
      << : *COMMON_BBL_PARAMS
      BBL_STATE_DIR: external-blobstore-directors/aws-s3-unversioned/
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
      bbl-config: bosh-backup-and-restore-meta
    ensure:
      put: bosh-backup-and-restore-meta
      params:
        repository: updated-bbl-state
        rebase: true

- name: setup-infrastructure-azure
  serial: true
  serial_groups: [azure]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: bosh-backup-and-restore-meta
  - task: setup-infrastructure
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    params:
      << : *COMMON_BBL_UP_PARAMS
      BBL_STATE_DIR: external-blobstore-directors/azure/
      BBL_LB_CERT: ((azure-lb-cert))
      BBL_LB_KEY: ((azure-lb-key))
      LB_DOMAIN: bbr-azure.cf-app.com
      BBL_ENV_NAME: bbr-azure
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
      bbl-config: bosh-backup-and-restore-meta
    ensure:
      put: bosh-backup-and-restore-meta
      params:
        repository: updated-bbl-state
        rebase: true

- name: clean-up-azure
  serial: true
  serial_groups: [azure]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
      passed: [setup-infrastructure-azure]
    - get: bosh-backup-and-restore-meta
    - get: everyday
      trigger: true
  - task: bosh-clean-up
    file: cf-deployment-concourse-tasks/bosh-cleanup/task.yml
    params:
      BBL_STATE_DIR: external-blobstore-directors/azure/
      CLEAN_ALL: false
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta

- name: destroy-infrastructure-azure
  serial: true
  serial_groups: [azure]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
      passed: [clean-up-azure]
    - get: bosh-backup-and-restore-meta
  - task: bbl-destroy
    file: cf-deployment-concourse-tasks/bbl-destroy/task.yml
    params:
      << : *COMMON_BBL_PARAMS
      BBL_STATE_DIR: external-blobstore-directors/azure/
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
      bbl-config: bosh-backup-and-restore-meta
    ensure:
      put: bosh-backup-and-restore-meta
      params:
        repository: updated-bbl-state
        rebase: true

- name: setup-infrastructure-aws-ec2
  serial: true
  serial_groups: [aws-ec2]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: bosh-backup-and-restore-meta
    - get: backup-and-restore-ci
  - task: setup-infrastructure
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    params:
      BBL_IAAS: aws
      BBL_AWS_ACCESS_KEY_ID: ((aws-access-key-id))
      BBL_AWS_SECRET_ACCESS_KEY: ((aws-secret-access-key))
      BBL_AWS_REGION: eu-west-1
      BBL_STATE_DIR: external-blobstore-directors/aws-ec2/
      BBL_LB_CERT: ((aws-ec2-lb-cert))
      BBL_LB_KEY: ((aws-ec2-lb-key))
      LB_DOMAIN: bbr-ec2.cf-app.com
      BBL_ENV_NAME: bbr-aws-ec2
      GIT_COMMIT_EMAIL: cf-lazarus@pivotal.io
      GIT_COMMIT_USERNAME: "Backup & Restore Concourse"
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
      bbl-config: bosh-backup-and-restore-meta
    ensure:
      put: bosh-backup-and-restore-meta
      params:
        repository: updated-bbl-state
        rebase: true
  - put: terraform
    params:
      terraform_source: bosh-backup-and-restore-meta/external-blobstore-directors/aws-ec2/iam-roles-terraform/
      env_name: external-blobstore-aws-ec2
      delete_on_failure: true

- name: clean-up-aws-ec2
  serial: true
  serial_groups: [aws-ec2]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
      passed: [setup-infrastructure-aws-ec2]
    - get: bosh-backup-and-restore-meta
    - get: everyday
      trigger: true
  - task: bosh-clean-up
    file: cf-deployment-concourse-tasks/bosh-cleanup/task.yml
    params:
      BBL_STATE_DIR: external-blobstore-directors/aws-ec2/
      CLEAN_ALL: false
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta

- name: destroy-infrastructure-aws-ec2
  serial: true
  serial_groups: [aws-ec2]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
      passed: [clean-up-aws-ec2]
    - get: bosh-backup-and-restore-meta
  - put: terraform
    params:
      terraform_source: bosh-backup-and-restore-meta/external-blobstore-directors/aws-ec2/iam-roles-terraform/
      env_name: external-blobstore-aws-ec2
      action: destroy
    get_params:
      action: destroy
  - task: bbl-destroy
    file: cf-deployment-concourse-tasks/bbl-destroy/task.yml
    params:
      BBL_IAAS: aws
      BBL_AWS_ACCESS_KEY_ID: ((aws-access-key-id))
      BBL_AWS_SECRET_ACCESS_KEY: ((aws-secret-access-key))
      GIT_COMMIT_EMAIL: cf-lazarus@pivotal.io
      GIT_COMMIT_USERNAME: "Backup & Restore Concourse"
      BBL_STATE_DIR: external-blobstore-directors/aws-ec2/
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
      bbl-config: bosh-backup-and-restore-meta
    ensure:
      put: bosh-backup-and-restore-meta
      params:
        repository: updated-bbl-state
        rebase: true

- name: setup-infrastructure-drats-pr-ragdoll
  serial: true
  serial_groups: [drats-pr-ragdoll]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: bosh-backup-and-restore-meta
  - task: setup-infrastructure
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    params:
      << : *COMMON_BBL_UP_PARAMS
      BBL_LB_CERT: ((drats-pr-ragdoll-lb-cert))
      BBL_STATE_DIR: drats-pr-ragdoll/
      BBL_LB_KEY: ((drats-pr-ragdoll-lb-key))
      LB_DOMAIN: ((drats-pr-ragdoll-lb-domain))
      BBL_ENV_NAME: drats-pr-ragdoll
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
      bbl-config: bosh-backup-and-restore-meta
    ensure:
      put: bosh-backup-and-restore-meta
      params:
        repository: updated-bbl-state
        rebase: true

- name: clean-up-drats-pr-ragdoll
  serial: true
  serial_groups: [drats-pr-ragdoll]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
      passed: [setup-infrastructure-drats-pr-ragdoll]
    - get: bosh-backup-and-restore-meta
    - get: everyday
      trigger: true
  - task: bosh-clean-up
    file: cf-deployment-concourse-tasks/bosh-cleanup/task.yml
    params:
      BBL_STATE_DIR: drats-pr-ragdoll/
      CLEAN_ALL: false
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta

- name: destroy-infrastructure-drats-pr-ragdoll
  serial: true
  serial_groups: [drats-pr-ragdoll]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
      passed: [clean-up-drats-pr-ragdoll]
    - get: bosh-backup-and-restore-meta
  - task: bbl-destroy
    file: cf-deployment-concourse-tasks/bbl-destroy/task.yml
    params:
      << : *COMMON_BBL_PARAMS
      BBL_STATE_DIR: drats-pr-ragdoll/
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
      bbl-config: bosh-backup-and-restore-meta
    ensure:
      put: bosh-backup-and-restore-meta
      params:
        repository: updated-bbl-state
        rebase: true

- name: setup-infrastructure-drats-papillon
  serial: true
  serial_groups: [drats-papillon]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: bosh-backup-and-restore-meta
  - task: setup-infrastructure
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    params:
      << : *COMMON_BBL_UP_PARAMS
      BBL_STATE_DIR: drats-papillon/
      BBL_LB_CERT: ((drats-papillon-lb-cert))
      BBL_LB_KEY: ((drats-papillon-lb-key))
      LB_DOMAIN: ((drats-papillon-lb-domain))
      BBL_ENV_NAME: drats-papillon
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
      bbl-config: bosh-backup-and-restore-meta
    ensure:
      put: bosh-backup-and-restore-meta
      params:
        repository: updated-bbl-state
        rebase: true

- name: clean-up-drats-papillon
  serial: true
  serial_groups: [drats-papillon]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
      passed: [setup-infrastructure-drats-papillon]
    - get: bosh-backup-and-restore-meta
    - get: everyday
      trigger: true
  - task: bosh-clean-up
    file: cf-deployment-concourse-tasks/bosh-cleanup/task.yml
    params:
      BBL_STATE_DIR: drats-papillon/
      CLEAN_ALL: false
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta

- name: destroy-infrastructure-drats-papillon
  serial: true
  serial_groups: [drats-papillon]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
      passed: [clean-up-drats-papillon]
    - get: bosh-backup-and-restore-meta
  - task: bbl-destroy
    file: cf-deployment-concourse-tasks/bbl-destroy/task.yml
    params:
      << : *COMMON_BBL_PARAMS
      BBL_STATE_DIR: drats-papillon/
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
      bbl-config: bosh-backup-and-restore-meta
    ensure:
      put: bosh-backup-and-restore-meta
      params:
        repository: updated-bbl-state
        rebase: true

- name: setup-infrastructure-drats-with-config-manx
  serial: true
  serial_groups: [drats-with-config-manx]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: bosh-backup-and-restore-meta
  - task: setup-infrastructure
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    params:
      << : *COMMON_BBL_UP_PARAMS
      BBL_STATE_DIR: drats-with-config-manx/
      BBL_LB_CERT: ((drats-with-config-manx-lb-cert))
      BBL_LB_KEY: ((drats-with-config-manx-lb-key))
      LB_DOMAIN: ((drats-with-config-manx-lb-domain))
      BBL_ENV_NAME: drats-with-config-manx
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
      bbl-config: bosh-backup-and-restore-meta
    ensure:
      put: bosh-backup-and-restore-meta
      params:
        repository: updated-bbl-state
        rebase: true

- name: clean-up-drats-with-config-manx
  serial: true
  serial_groups: [drats-with-config-manx]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
      passed: [setup-infrastructure-drats-with-config-manx]
    - get: bosh-backup-and-restore-meta
    - get: everyday
      trigger: true
  - task: bosh-clean-up
    file: cf-deployment-concourse-tasks/bosh-cleanup/task.yml
    params:
      BBL_STATE_DIR: drats-with-config-manx/
      CLEAN_ALL: false
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta

- name: destroy-infrastructure-drats-with-config-manx
  serial: true
  serial_groups: [drats-with-config-manx]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
      passed: [clean-up-drats-with-config-manx]
    - get: bosh-backup-and-restore-meta
  - task: bbl-destroy
    file: cf-deployment-concourse-tasks/bbl-destroy/task.yml
    params:
      << : *COMMON_BBL_PARAMS
      BBL_STATE_DIR: drats-with-config-manx/
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
      bbl-config: bosh-backup-and-restore-meta
    ensure:
      put: bosh-backup-and-restore-meta
      params:
        repository: updated-bbl-state
        rebase: true

- name: setup-infrastructure-maru
  serial: true
  serial_groups: [maru]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: bosh-backup-and-restore-meta
    - get: backup-and-restore-ci
  - task: setup-infrastructure
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    params:
      << : *COMMON_BBL_UP_PARAMS
      BBL_STATE_DIR: maru/
      BBL_ENV_NAME: maru
      SKIP_LB_CREATION: true
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
      bbl-config: bosh-backup-and-restore-meta
    ensure:
      put: bosh-backup-and-restore-meta
      params:
        repository: updated-bbl-state
        rebase: true
  - task: update-runtime-config-bosh-dns
    file: backup-and-restore-ci/tasks/update-config/task.yml
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
    params:
      NAME: default
      TYPE: runtime
      BBL_STATE_DIR: maru
      CONFIG_PATH: bosh-deployment/runtime-configs/dns.yml

- name: clean-up-maru
  serial: true
  serial_groups: [maru]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
      passed: [setup-infrastructure-maru]
    - get: bosh-backup-and-restore-meta
    - get: everyday
      trigger: true
  - task: bosh-clean-up
    file: cf-deployment-concourse-tasks/bosh-cleanup/task.yml
    params:
      BBL_STATE_DIR: maru/
      CLEAN_ALL: false
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta

- name: destroy-infrastructure-maru
  serial: true
  serial_groups: [maru]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
      passed: [clean-up-maru]
    - get: bosh-backup-and-restore-meta
  - task: bbl-destroy
    file: cf-deployment-concourse-tasks/bbl-destroy/task.yml
    params:
      << : *COMMON_BBL_PARAMS
      BBL_STATE_DIR: maru/
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
      bbl-config: bosh-backup-and-restore-meta
    ensure:
      put: bosh-backup-and-restore-meta
      params:
        repository: updated-bbl-state
        rebase: true

- name: setup-infrastructure-maru-lite
  serial: true
  serial_groups: [maru-lite]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: bosh-backup-and-restore-meta
    - get: bosh-bootloader
    - get: backup-and-restore-ci
  - task: update-director-vm-size
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
      inputs:
        - name: bosh-bootloader
        - name: bosh-backup-and-restore-meta
      outputs:
        - name: bbl-updated-config
      run:
        path: bash
        args:
        - -c
        - |
          set -eu
          set -o pipefail

          cp -r bosh-bootloader/plan-patches/bosh-lite-gcp/. bbl-updated-config/config
          echo -e "---
          # Configure sizes for bosh-lite on gcp
          - type: replace
            path: /resource_pools/name=vms/cloud_properties/machine_type
            value: n1-standard-16
          " > bbl-updated-config/config/update-director-vm-size.yml

          APPEND="-o \${BBL_STATE_DIR}/update-director-vm-size.yml"
          FILE=bbl-updated-config/config/create-director-override.sh
          echo "$(cat $FILE) $APPEND" > $FILE

  - task: setup-infrastructure
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    params:
      << : *COMMON_BBL_UP_PARAMS
      BBL_STATE_DIR: maru-lite/
      BBL_ENV_NAME: maru-lite
      BBL_CONFIG_DIR: config/
      SKIP_LB_CREATION: true
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
      bbl-config: bbl-updated-config
    ensure:
      put: bosh-backup-and-restore-meta
      params:
        repository: updated-bbl-state
        rebase: true
  - task: update-runtime-config-bosh-dns
    file: backup-and-restore-ci/tasks/update-config/task.yml
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
    params:
      NAME: default
      TYPE: runtime
      BBL_STATE_DIR: maru-lite
      CONFIG_PATH: bosh-deployment/runtime-configs/dns.yml

- name: clean-up-maru-lite
  serial: true
  serial_groups: [maru-lite]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
      passed: [setup-infrastructure-maru-lite]
    - get: bosh-backup-and-restore-meta
    - get: everyday
      trigger: true
  - task: bosh-clean-up
    file: cf-deployment-concourse-tasks/bosh-cleanup/task.yml
    params:
      BBL_STATE_DIR: maru-lite/
      CLEAN_ALL: false
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta

- name: destroy-infrastructure-maru-lite
  serial: true
  serial_groups: [maru-lite]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
      passed: [clean-up-maru-lite]
    - get: bosh-backup-and-restore-meta
  - task: bbl-destroy
    file: cf-deployment-concourse-tasks/bbl-destroy/task.yml
    params:
      << : *COMMON_BBL_PARAMS
      BBL_STATE_DIR: maru-lite/
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
      bbl-config: bosh-backup-and-restore-meta
    ensure:
      put: bosh-backup-and-restore-meta
      params:
        repository: updated-bbl-state
        rebase: true

- name: setup-infrastructure-gcs
  serial: true
  serial_groups: [gcs]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
    - get: bosh-backup-and-restore-meta
  - task: setup-infrastructure
    file: cf-deployment-concourse-tasks/bbl-up/task.yml
    params:
      << : *COMMON_BBL_UP_PARAMS
      BBL_STATE_DIR: external-blobstore-directors/gcs/
      BBL_LB_CERT: ((gcs-lb-cert))
      BBL_LB_KEY: ((gcs-lb-key))
      LB_DOMAIN: bbr-gcs.cf-app.com
      BBL_ENV_NAME: bbr-gcs
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
      bbl-config: bosh-backup-and-restore-meta
    ensure:
      put: bosh-backup-and-restore-meta
      params:
        repository: updated-bbl-state
        rebase: true

- name: clean-up-gcs
  serial: true
  serial_groups: [gcs]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
      passed: [setup-infrastructure-gcs]
    - get: bosh-backup-and-restore-meta
    - get: everyday
      trigger: true
  - task: bosh-clean-up
    file: cf-deployment-concourse-tasks/bosh-cleanup/task.yml
    params:
      BBL_STATE_DIR: external-blobstore-directors/gcs/
      CLEAN_ALL: false
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta

- name: destroy-infrastructure-gcs
  serial: true
  serial_groups: [gcs]
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks
      passed: [clean-up-gcs]
    - get: bosh-backup-and-restore-meta
  - task: bbl-destroy
    file: cf-deployment-concourse-tasks/bbl-destroy/task.yml
    params:
      << : *COMMON_BBL_PARAMS
      BBL_STATE_DIR: external-blobstore-directors/gcs/
    input_mapping:
      bbl-state: bosh-backup-and-restore-meta
      bbl-config: bosh-backup-and-restore-meta
    ensure:
      put: bosh-backup-and-restore-meta
      params:
        repository: updated-bbl-state
        rebase: true

- name: deploy-tracker-bot
  serial: true
  plan:
  - aggregate:
    - get: relint-trackerbot
    - get: bosh-backup-and-restore-meta
    - get: backup-and-restore-ci
  - task: tracker-bot-config
    file: backup-and-restore-ci/tasks/tracker-bot-config/task.yml
  - put: bbr-tracker-bot
    params:
      path: relint-trackerbot-with-config
      manifest: bosh-backup-and-restore-meta/tracker-bot/manifest.yml
      environment_variables:
        TRACKER_API_TOKEN: ((tracker-api-token))

- name: renew-environments
  plan:
  - aggregate:
    - get: backup-and-restore-ci
    - get: every-tuesday
      trigger: true
    - get: every-friday
      trigger: true
  - task: renew-environments
    tags: [platform-recovery-vsphere]
    file: backup-and-restore-ci/tasks/renew-env/task.yml
    params:
      ENVIRONMENTS: ((environments-to-renew))

- name: delete-unattached-disks
  plan:
  - get: every-friday
    trigger: true
  - task: delete-unattached-disks
    params:
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: google/cloud-sdk
      params:
        GCP_SERVICE_ACCOUNT_KEY:
      run:
        path: bash
        args:
        - -c
        - |
          set -eu
          set -o pipefail

          gcloud auth activate-service-account --key-file <(echo "$GCP_SERVICE_ACCOUNT_KEY")
          if gcloud compute disks list --filter="-users:*" --uri | grep "Listed 0 items."; then
              gcloud compute disks list --filter="-users:*" --uri  | xargs gcloud compute disks delete --quiet
          else
              echo "No unattached disks to delete"
          fi

- name: setup-gcp-iam-role-bosh-director
  plan:
  - get: bosh-backup-and-restore-meta
  - put: terraform
    params:
      terraform_source: bosh-backup-and-restore-meta/terraform/bosh-director-iam-role/gcp
      env_name: gcp-iam-role-bosh-director
      delete_on_failure: true
      vars:
        gcp_service_account_key: ((gcp_iam_role_manager_service_account_key))

- name: destroy-gcp-iam-role-bosh-director
  plan:
  - get: bosh-backup-and-restore-meta
  - put: terraform
    params:
      terraform_source: bosh-backup-and-restore-meta/terraform/bosh-director-iam-role/gcp
      env_name: gcp-iam-role-bosh-director
      action: destroy
      vars:
        gcp_service_account_key: ((gcp_iam_role_manager_service_account_key))
    get_params:
      action: destroy
