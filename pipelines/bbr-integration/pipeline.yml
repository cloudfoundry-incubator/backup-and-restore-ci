---
groups:
- name: CF-BACKUP-RELEASE
  jobs:
  - release-unit-tests
  - create-backup-and-restore-release
  - generate-manifest-and-deploy
  - generate-manifest-and-deploy-dev
  - acceptance-tests
  - bosh-delete-dev-deployments
- name: SHIPIT
  jobs:
  - generate-manifest-and-deploy-acceptance
  - bosh-delete-acceptance-deployments
  - create-final-patch
  - create-final-minor
  - create-final-major

resource_types:
- name: git
  type: docker-image
  source:
    repository: concourse/git-resource
    tag: latest

resources:
- name: cf-backup-and-restore-release
  type: git
  source:
    uri: git@github.com:pivotal-cf/cf-backup-and-restore-release.git
    private_key: ((git-private-key))
    branch: master
- name: disaster-recovery-acceptance-tests
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/disaster-recovery-acceptance-tests.git
    private_key: ((git-private-key))
    branch: master
- name: cf-deployment-master
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-deployment.git
    private_key: ((git-private-key))
    branch: v0.7.0
- name: bbr-binary-release
  type: s3
  source:
    bucket: bosh-backup-and-restore-builds
    region_name: eu-west-1
    regexp: bbr-(.*)
    access_key_id: ((aws-access-key-id))
    secret_access_key: ((aws-secret-access-key))
- name: release
  type: s3
  source:
    bucket: cf-backup-and-restore-releases
    regexp: cf-backup-and-restore-(.*).tgz
    region_name: eu-west-1
    access_key_id: ((aws-access-key-id))
    secret_access_key: ((aws-secret-access-key))
- name: mysql-backup-release
  type: s3
  source:
    bucket: mysql-backup-releases
    regexp: final/mysql-backup-([\d.]+\.0).tgz
    region_name: us-east-1
    access_key_id: ((mysql-aws-access-key-id))
    secret_access_key: ((mysql-aws-secret-access-key))
- name: bosh-backup-and-restore-meta
  type: git
  source:
    uri: git@github.com:pivotal-cf/bosh-backup-and-restore-meta.git
    private_key: ((git-private-key))
    git_crypt_key: ((git-crypt-key))
    branch: master
- name: version
  type: semver
  source:
    bucket: cf-backup-and-restore-releases
    region_name: eu-west-1
    key: current-dev-version
    access_key_id: ((aws-access-key-id))
    secret_access_key: ((aws-secret-access-key))
- name: backup-and-restore-ci
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/backup-and-restore-ci.git
    private_key: ((git-private-key))
    branch: master
- name: cf-backup-and-restore-github-release
  type: github-release
  source:
    user: pivotal-cf
    repository: cf-backup-and-restore-release
    access_token: ((github-access-token))
    drafts: true

jobs:
- name: release-unit-tests
  serial: true
  plan:
  - get: cf-backup-and-restore-release
    trigger: true
  - task: unit-tests
    file: cf-backup-and-restore-release/ci/tasks/unit-tests.yml
    params:
      GITHUB_SSH_KEY: ((github-ssh-key))
- name: create-backup-and-restore-release
  serial: true
  plan:
  - get: cf-backup-and-restore-release
    passed: [release-unit-tests]
    trigger: true
  - get: version
    params: {pre: "dev"}
  - task: create-release
    file: cf-backup-and-restore-release/ci/tasks/create-release.yml
    params:
      AWS_ACCESS_KEY_ID: ((aws-access-key-id))
      AWS_SECRET_ACCESS_KEY: ((aws-secret-access-key))
  - put: release
    params:
      file: cf-backup-and-restore-release-build/cf-backup-and-restore-*.tgz
  - put: version
    params: {file: version/number}

- name: generate-manifest-and-deploy
  serial: true
  serial_groups: [integration-cf]
  plan:
  - get: cf-backup-and-restore-release
    passed: [create-backup-and-restore-release]
    trigger: true
  - get: cf-deployment
    resource: cf-deployment-master
  - get: release-tarball
    resource: release
    passed: [create-backup-and-restore-release]
  - get: mysql-backup-release
    resource: mysql-backup-release
  - get: bosh-backup-and-restore-meta
  - task: upload-stemcell-and-mysql-release
    file: cf-backup-and-restore-release/ci/tasks/upload-stemcell-and-mysql.yml
    params:
      BOSH_CLIENT_SECRET: ((genesis-bosh-director-password))
      BOSH_CLIENT: admin
  - task: generate-manifest-0
    file: cf-backup-and-restore-release/ci/tasks/generate-manifest.yml
    output_mapping:
      generated-manifest: generated-manifest-0
    params:
      DEPLOYMENT_CIDR: 10.0.8
      DEPLOYMENT_NAME: cf-integration-0
  - task: deploy-cf-integration-0
    file: cf-backup-and-restore-release/ci/tasks/deploy.yml
    input_mapping:
      generated-manifest: generated-manifest-0
    params:
      DEPLOYMENT_NAME: cf-integration-0
      GIT_SSH_KEY: ((git-private-key))
      GITHUB_PUBLIC_KEY: ((github-public-key))
      BOSH_CLIENT_SECRET: ((genesis-bosh-director-password))
      BOSH_CLIENT: admin
- name: generate-manifest-and-deploy-dev
  serial: true
  plan:
  - get: cf-backup-and-restore-release
    trigger: true
    passed: [create-backup-and-restore-release]
  - get: cf-deployment
    resource: cf-deployment-master
  - get: release-tarball
    resource: release
    passed: [create-backup-and-restore-release]
  - get: mysql-backup-release
    resource: mysql-backup-release
  - get: bosh-backup-and-restore-meta
  - task: generate-manifest-0
    file: cf-backup-and-restore-release/ci/tasks/generate-manifest.yml
    output_mapping:
      generated-manifest: generated-manifest-0
    params:
      DEPLOYMENT_CIDR: 10.0.12
      DEPLOYMENT_NAME: cf-dev-0
      STATIC_IP: 104.155.98.248
  - task: deploy-cf-dev-0
    file: cf-backup-and-restore-release/ci/tasks/deploy.yml
    input_mapping:
      generated-manifest: generated-manifest-0
    params:
      DEPLOYMENT_NAME: cf-dev-0
      GIT_SSH_KEY: ((git-private-key))
      GITHUB_PUBLIC_KEY: ((github-public-key))
      BOSH_CLIENT_SECRET: ((genesis-bosh-director-password))
      BOSH_CLIENT: admin
  - task: generate-manifest-1
    file: cf-backup-and-restore-release/ci/tasks/generate-manifest.yml
    output_mapping:
      generated-manifest: generated-manifest-1
    params:
      DEPLOYMENT_CIDR: 10.0.13
      DEPLOYMENT_NAME: cf-dev-1
      STATIC_IP: 35.187.16.108
  - task: deploy-cf-dev-1
    file: cf-backup-and-restore-release/ci/tasks/deploy.yml
    input_mapping:
      generated-manifest: generated-manifest-1
    params:
      DEPLOYMENT_NAME: cf-dev-1
      GIT_SSH_KEY: ((git-private-key))
      GITHUB_PUBLIC_KEY: ((github-public-key))
      BOSH_CLIENT_SECRET: ((genesis-bosh-director-password))
      BOSH_CLIENT: admin

- name: acceptance-tests
  serial: true
  serial_groups: [integration-cf]
  plan:
  - get: cf-backup-and-restore-release
    passed: [generate-manifest-and-deploy]
    trigger: true
  - get: disaster-recovery-acceptance-tests
    trigger: true
  - get: release-tarball
    resource: release
    passed: [generate-manifest-and-deploy]
  - get: bosh-backup-and-restore-meta
  - get: bbr-binary-release
  - task: acceptance-tests
    file: bosh-backup-and-restore-meta/ci/tasks/run-drats-acceptance-tests/task.yml
    params:
      CF_DEPLOYMENT_NAME: cf-integration-0
      CF_API_URL: https://api.cf-integration-0.backup-and-restore.cf-app.com
      CF_ADMIN_USERNAME: admin
      BOSH_CERT_PATH: bosh-backup-and-restore-meta/certs/genesis-bosh.backup-and-restore.cf-app.com.crt
      BOSH_CLIENT: admin
      BOSH_CLIENT_SECRET: ((genesis-bosh-director-password))
      BOSH_ENVIRONMENT: https://genesis-bosh.backup-and-restore.cf-app.com

- name: bosh-delete-dev-deployments
  serial: true
  plan:
  - aggregate:
    - get: cf-backup-and-restore-release
      passed: [acceptance-tests]
      trigger: true
    - get: backup-and-restore-ci
    - get: bosh-backup-and-restore-meta
  - task: bosh-delete-cf-integration-0
    file: backup-and-restore-ci/tasks/bosh-delete-deployment/task.yml
    params:
      BOSH_DEPLOYMENT: cf-integration-0
      BOSH_ENVIRONMENT: ((genesis-bosh-environment))
      BOSH_CLIENT_SECRET: ((genesis-bosh-director-password))
      BOSH_CLIENT: admin
      BOSH_CA_CERT_PATH: certs/genesis-bosh.backup-and-restore.cf-app.com.crt
  - task: bosh-delete-cf-dev-0
    file: backup-and-restore-ci/tasks/bosh-delete-deployment/task.yml
    params:
      BOSH_DEPLOYMENT: cf-dev-0
      BOSH_ENVIRONMENT: ((genesis-bosh-environment))
      BOSH_CLIENT_SECRET: ((genesis-bosh-director-password))
      BOSH_CLIENT: admin
      BOSH_CA_CERT_PATH: certs/genesis-bosh.backup-and-restore.cf-app.com.crt
  - task: bosh-delete-cf-dev-1
    file: backup-and-restore-ci/tasks/bosh-delete-deployment/task.yml
    params:
      BOSH_DEPLOYMENT: cf-dev-1
      BOSH_ENVIRONMENT: ((genesis-bosh-environment))
      BOSH_CLIENT_SECRET: ((genesis-bosh-director-password))
      BOSH_CLIENT: admin
      BOSH_CA_CERT_PATH: certs/genesis-bosh.backup-and-restore.cf-app.com.crt

- name: generate-manifest-and-deploy-acceptance
  serial: true
  plan:
  - get: cf-backup-and-restore-release
    passed: [acceptance-tests]
  - get: cf-deployment
    resource: cf-deployment-master
  - get: release-tarball
    resource: release
    passed: [acceptance-tests]
  - get: mysql-backup-release
    resource: mysql-backup-release
  - get: bosh-backup-and-restore-meta
  - task: generate-manifest-0
    file: cf-backup-and-restore-release/ci/tasks/generate-manifest.yml
    output_mapping:
      generated-manifest: generated-manifest-0
    params:
      DEPLOYMENT_CIDR: 10.0.5
      DEPLOYMENT_NAME: cf-acceptance-0
  - task: deploy-cf-acceptance-0
    file: cf-backup-and-restore-release/ci/tasks/deploy.yml
    input_mapping:
      generated-manifest: generated-manifest-0
    params:
      DEPLOYMENT_NAME: cf-acceptance-0
      GIT_SSH_KEY: ((git-private-key))
      GITHUB_PUBLIC_KEY: ((github-public-key))
      BOSH_CLIENT_SECRET: ((genesis-bosh-director-password))
      BOSH_CLIENT: admin
  - task: generate-manifest-1
    file: cf-backup-and-restore-release/ci/tasks/generate-manifest.yml
    output_mapping:
      generated-manifest: generated-manifest-1
    params:
      DEPLOYMENT_CIDR: 10.0.6
      DEPLOYMENT_NAME: cf-acceptance-1
  - task: deploy-cf-acceptance-1
    file: cf-backup-and-restore-release/ci/tasks/deploy.yml
    input_mapping:
      generated-manifest: generated-manifest-1
    params:
      DEPLOYMENT_NAME: cf-acceptance-1
      GIT_SSH_KEY: ((git-private-key))
      GITHUB_PUBLIC_KEY: ((github-public-key))
      BOSH_CLIENT_SECRET: ((genesis-bosh-director-password))
      BOSH_CLIENT: admin

- name: bosh-delete-acceptance-deployments
  serial: true
  plan:
  - aggregate:
    - get: cf-backup-and-restore-github-release
      trigger: true
    - get: backup-and-restore-ci
    - get: bosh-backup-and-restore-meta
  - task: bosh-delete-cf-acceptance-0
    file: backup-and-restore-ci/tasks/bosh-delete-deployment/task.yml
    params:
      BOSH_DEPLOYMENT: cf-acceptance-0
      BOSH_ENVIRONMENT: ((genesis-bosh-environment))
      BOSH_CLIENT_SECRET: ((genesis-bosh-director-password))
      BOSH_CLIENT: admin
      BOSH_CA_CERT_PATH: certs/genesis-bosh.backup-and-restore.cf-app.com.crt
  - task: bosh-delete-cf-acceptance-1
    file: backup-and-restore-ci/tasks/bosh-delete-deployment/task.yml
    params:
      BOSH_DEPLOYMENT: cf-acceptance-1
      BOSH_ENVIRONMENT: ((genesis-bosh-environment))
      BOSH_CLIENT_SECRET: ((genesis-bosh-director-password))
      BOSH_CLIENT: admin
      BOSH_CA_CERT_PATH: certs/genesis-bosh.backup-and-restore.cf-app.com.crt

- name: create-final-patch
  serial: true
  plan:
  - get: cf-backup-and-restore-release
    passed: [generate-manifest-and-deploy-acceptance]
  - get: version
    params: {bump: patch}
  - task: create-final-release
    file: cf-backup-and-restore-release/ci/tasks/create-final.yml
    params:
      AWS_ACCESS_KEY_ID: ((aws-access-key-id))
      AWS_SECRET_ACCESS_KEY: ((aws-secret-access-key))
  - put: version
    params: {file: version/number}
  - put: cf-backup-and-restore-release
    params:
      repository: cf-backup-and-restore-final-release
      rebase: true
      tag: version/number
      tag_prefix: v
  - put: release
    params:
      file: cf-backup-and-restore-final-release-tarball/cf-backup-and-restore-*.tgz

- name: create-final-minor
  serial: true
  plan:
  - get: cf-backup-and-restore-release
    passed: [generate-manifest-and-deploy-acceptance]
  - get: version
    params: {bump: minor}
  - task: create-final-release
    file: cf-backup-and-restore-release/ci/tasks/create-final.yml
    params:
      AWS_ACCESS_KEY_ID: ((aws-access-key-id))
      AWS_SECRET_ACCESS_KEY: ((aws-secret-access-key))
  - put: version
    params: {file: version/number}
  - put: cf-backup-and-restore-release
    params:
      repository: cf-backup-and-restore-final-release
      rebase: true
      tag: version/number
      tag_prefix: v
  - put: release
    params:
      file: cf-backup-and-restore-final-release-tarball/cf-backup-and-restore-*.tgz

- name: create-final-major
  serial: true
  plan:
  - get: cf-backup-and-restore-release
    passed: [generate-manifest-and-deploy-acceptance]
  - get: version
    params: {bump: major}
  - task: create-final-release
    file: cf-backup-and-restore-release/ci/tasks/create-final.yml
    params:
      AWS_ACCESS_KEY_ID: ((aws-access-key-id))
      AWS_SECRET_ACCESS_KEY: ((aws-secret-access-key))
  - put: version
    params: {file: version/number}
  - put: cf-backup-and-restore-release
    params:
      repository: cf-backup-and-restore-final-release
      rebase: true
      tag: version/number
      tag_prefix: v
  - put: release
    params:
      file: cf-backup-and-restore-final-release-tarball/cf-backup-and-restore-*.tgz
